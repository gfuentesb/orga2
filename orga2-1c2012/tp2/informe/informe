

------------------------------------------------------------------------------------------------
                            #######                          #####
                            #     #  #####    ####     ##   #     #
                            #     #  #    #  #    #   #  #        #
                            #     #  #    #  #       #    #  #####
                            #     #  #####   #  ###  ###### #
                            #     #  #   #   #    #  #    # #
                            #######  #    #   ####   #    # #######
------------------------------------------------------------------------------------------------


                                 #####    ###   #     # ######
                                #     #    #    ##   ## #     #
                                #          #    # # # # #     #
                                 #####     #    #  #  # #     #
                                      #    #    #     # #     #
                                #     #    #    #     # #     #
                                 #####    ###   #     # ######




                            Grupo "El señor de los Novillos"
                +-------------------------------------------------------------+       
                |                                                             |
                |   Matías "Tom Bondiolín" Marquez                   703/08   |
                |                                                             |
                |   Pablo "Colita de Galadril" Somodi                818/10   |
                |                                                             |
                |   Marco "Chorimir" Vanotti                         229/10   |
                |                                                             |
                +-------------------------------------------------------------+



























Marquez, Somodi, Vanotti                   |                      Organización Del Computador 2
-----------------------------------------------------------------------------------------------
 _____      _                 _                _                 
|_   _|    | |               | |              (_)              _ 
  | | _ __ | |_ _ __ ___   __| |_   _  ___ ___ _  ___  _ __   (_)
  | || '_ \| __| '__/ _ \ / _` | | | |/ __/ __| |/ _ \| '_ \     
 _| || | | | |_| | | (_) | (_| | |_| | (_| (__| | (_) | | | |  _ 
 \___/_| |_|\__|_|  \___/ \__,_|\__,_|\___\___|_|\___/|_| |_| (_)



       ....           urante la realización de este trabajo práctico hemos tenido que enfrentar
   .xH888888Hx.       la problemática de diseñar algoritmos que aprovechen el modelo SIMD 
 .H8888888888888:     provisto por la arquitectura Intel. Procesamos imágenes aplicando
 888*"""?""*88888X    distintos filtros implementados en el lenguaje ANSI-C y en el lenguaje 
'f     d8x.   ^%88k   Ensamblador (utilizando instrucciones SSE) y comparamos el rendimiento
'>    <88888X   '?8   obtenido. 
 `:..:`888888>    8> 
        `"*88     X     Los filtros a implementar eran rotar, monocromatizar, sepia, blit, 
   .xHHhx.."      !   scale2x, smalltiles, edge-detection y blur, que serán descriptos 
  X88888888hx. ..!    pertinentemente más adelante. 
 !   "*888888888"    
        ^"***"`         Para facilitar las pruebas y mediciones sobre los algoritmos, la 
cátedra nos ha provisto una cómoda interfaz de trabajo utilizando la librería de visión 
computacional "OpenCv" la cual nos entrega las imágenes en memoria, listas para ser procesadas,
 en un formato homogéneo (un byte por canal RGB).


______                               _ _           
|  _  \                             | | |        _ 
| | | |___  ___  __ _ _ __ _ __ ___ | | | ___   (_)
| | | / _ \/ __|/ _` | '__| '__/ _ \| | |/ _ \     
| |/ /  __/\__ \ (_| | |  | | | (_) | | | (_) |  _ 
|___/ \___||___/\__,_|_|  |_|  \___/|_|_|\___/  (_)

                                                        88""Yb  dP"Yb  888888    db    88""Yb 
                                                        88__dP dP   Yb   88     dPYb   88__dP 
                                                        88"Yb  Yb   dP   88    dP__Yb  88"Yb  
                                                        88  Yb  YbodP    88   dP""""Yb 88  Yb 

    El filtro rotar (o feel like Hulk) consiste en rotar los canales RGB de una imagen de la 
siguiente manera:
                        +----------+----------+----------+
                        |  88""Yb  |  dP""b8  |  88""Yb  |
                        |  88__dP  | dP   `"  |  88__dP  |
                        |  88"Yb   | Yb  "88  |  88""Yb  |
                        |  88  Yb  |  YboodP  |  88oodP  |
                        +----------+----------+----------+
                             +---+      |          |
                                 v      |          |
                             +----------+   +------+
                             |   v          v
                             |   +-------------------+
                             |              v        |
                             v              v        v
                        +----------+----------+----------+
                        |  dP""b8  |  88""Yb  |  88""Yb  |
                        | dP   `"  |  88__dP  |  88__dP  |
                        | Yb  "88  |  88""Yb  |  88"Yb   |
                        |  YboodP  |  88oodP  |  88  Yb  |
                        +----------+----------+----------+
-----------------------------------------------------------------------------------------------
                                         Hoja 0x01
Marquez, Somodi, Vanotti                   |                      Organización Del Computador 2
-----------------------------------------------------------------------------------------------

                  .-.
Implementación en |   :
                  `-' 

    La implementación de este filtro en el lenguaje ANSI C utilizando un modelo SISD resulta
trivial, iteramos la imagen en memoria recorriendo fila por fila, columna por columna, 
cambiando pixel por pixel el orden de sus componentes RGB.

                  .-. .-. .  . 
Implementación en |-| `-. |\/| :
                  ` ' `-' '  ` 

    Para esta función, iteramos fila por fila, para cada una de ellas, procesamos de a 16 bytes
(4 píxels), cargándolos en registros XMM de forma alineada con la instrucción movdqa. Esto lo
hacemos solo para las direcciones alineadas a 16 bytes, claramente no todas las imágenes tienen
una cantidad de bytes por fila múltiplo de 16, así que para procesar el resto de los bytes
(a lo sumo 15), volvemos para "atras" hasta que nos queden 16 bytes por procesar, luego 
cargamos eso en registros XMM de forma desalineada con la instrucción movdqu.

    El procesamiento de 4 píxeles lo hacemos utilizando la instrucción pshufb, que se encarga
de reordenar los bytes de un registro xmm según una máscara dada.


                     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
                     |A3|R3|G3|B3|A2|R2|G2|B2|A1|R1|G1|B1|A0|R0|G0|B0|
                     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
                     |15|14|13|12|11|10|09|08|07|06|05|04|03|02|01|00|
                     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
                                             |
                                             |
                                         pshufb_mask
                                             |
                                             |
                     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
                     |A3|G3|B3|R3|A2|G2|B2|R2|A1|G1|B1|R1|A0|G0|B0|R0|
                     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
                     |15|14|13|12|11|10|09|08|07|06|05|04|03|02|01|00|
                     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+



    Cada píxel es un grupo de 4 bytes, cuyas componentes son R, G, B y un byte más utilizado
para alineación. La parte inferior de cada cuadro muestra el índice del byte dentro del
registro xmm, mientras que la parte superior especifica qué componente es y de qué píxel forma
parte; así, se ve cómo el primer píxel intercambia los componentes RGB por GBR como se pide.


    Una vez aplicada la máscara, se mueve de forma alineada a la memoria destinada para la 
imagen resultante, de nuevo, los píxeles restantes se mueven de forma desalineada.









-----------------------------------------------------------------------------------------------
                                         Hoja 0x02
Marquez, Somodi, Vanotti                   |                      Organización Del Computador 2
-----------------------------------------------------------------------------------------------

                         .dP"Y8 8b    d8    db    88     88     888888 88 88     888888 .dP"Y8 
                         `Ybo." 88b  d88   dPYb   88     88       88   88 88     88__   `Ybo." 
                         o.`Y8b 88YbdP88  dP__Yb  88  .o 88  .o   88   88 88  .o 88""   o.`Y8b 
                         8bodP' 88 YY 88 dP""""Yb 88ood8 88ood8   88   88 88ood8 888888 8bodP' 

    Aplicar este filtro no es más que replicar la imagen original 4 veces sobre el destino de 
forma escalada. 

    +--------------------------------------+     +--------------------------------------+
    |                                      |     |                  |                   |
    |     ############################     |     |  ##############  |  ##############   |
    |     ############################     |     |        ##        |        ##         |
    |                #######               |     |        ##        |        ##         |
    |                #######               |     |        ##        |        ##         |
    |                #######               |     |        ##        |        ##         |
    |                #######               |     |        ##        |        ##         |
    |                #######               |     |        ##        |        ##         |
    |                #######               |     |        ##        |        ##         |
    |                #######               |     |        ##        |        ##         |
    |                #######               |     |  ##############  |  ##############   |
    |                #######               |     |                  |                   |
    |                #######               |     +------------------+-------------------+
    |                #######               |     |                  |                   |
    |                #######               |     |  ##############  |  ##############   |
    |                #######               |     |        ##        |        ##         |
    |                #######               |     |        ##        |        ##         |
    |                #######               |     |        ##        |        ##         |
    |                #######               |     |        ##        |        ##         |
    |                #######               |     |        ##        |        ##         |
    |                #######               |     |        ##        |        ##         |
    |                #######               |     |        ##        |        ##         |
    |     ############################     |     |        ##        |        ##         |
    |     ############################     |     |  ##############  |  ##############   |
    |                                      |     |                  |                   |
    +--------------------------------------+     +------------------+-------------------+


                  .-.
Implementación en |   :
                  `-' 

    Si la imagen tiene un alto o ancho impar, se descarta el último píxel del lado impar para
poder procesarlo como una imagen con longitudes pares. Se procesa fila por medio, columna por
medio copiando sólo los píxeles en posiciones pares a las 4 posiciones diferentes en la imágen
destino. Se copia componente a componente, primero en el cuadrante superior izquierdo, luego
en el superior derecho, después inferior derecho, y finalmente inferior izquierdo. 












-----------------------------------------------------------------------------------------------
                                         Hoja 0x03
Marquez, Somodi, Vanotti                   |                      Organización Del Computador 2
-----------------------------------------------------------------------------------------------



                  .-. .-. .  . 
Implementación en |-| `-. |\/| :
                  ` ' `-' '  ` 

    Dado que sólo tenemos que copiar la mitad de los píxeles (de cada 4 píxeles copiamos el 
primero y el tercero), cargamos 16 bytes en un registro (xmm1), y aplicamos una máscara 
utilizando la instrucción pshufd, la cual reordena los dwords dentro un registro xmm según 
una máscara dada. 

                     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
                     |  Pixel 3  |  Pixel 2  |  Pixel 1  |  Pixel 0  |
                     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
                     |15|14|13|12|11|10|09|08|07|06|05|04|03|02|01|00|
                     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
                                             |
                                             |
                                 pshufd_mask (máscara 0x00001000)
                                             |
                                             |
                     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
                     |  Pixel 0  |  Pixel 0  |  Pixel 2  |  Pixel 0  |
                     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
                     |15|14|13|12|11|10|09|08|07|06|05|04|03|02|01|00|
                     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+


    Copiamos la parte baja de este registro xmm resultante a las cuatro posiciones
correspondientes en el destino, en sentido horario, comenzando a partir del segundo cuadrante.
 Esta copia la hacemos usando la instrucción movq.

    Como es observable, si la imágen no tiene tamaño múltiplo de 16, los últimos cuatro píxeles
podrían quedar sin procesar, es por eso que cuando llegamos al final, utilizamos el mismo 
método del filtro anterior para procesarlos, volvemos para atrás lo suficiente para poder 
cargar 16 bytes de forma no alineada en un registro xmm.




                                                                       88""Yb 88     88 888888 
                                                                       88__dP 88     88   88   
                                                                       88""Yb 88  .o 88   88   
                                                                       88oodP 88ood8 88   88  


    El arte del blitting es el proceso de combinar dos mapas de bits en uno solo. Para este
trabajo nos vemos ante la problemática de pegar una imagen sobre otra, asumiendo que el píxel
color magenta representa la transparencia, y, por ende, que de ese pixel queda la imagen de 
fondo. ¿Quién no ha querido sacarse una foto con nuestro compañero, el General Juan Domingo?
Gracias a los avances tecnológicos que nos brinda la manipulación digital de imágenes, con 
BLIT esto es posible. 






-----------------------------------------------------------------------------------------------
                                         Hoja 0x04
Marquez, Somodi, Vanotti                   |                      Organización Del Computador 2
-----------------------------------------------------------------------------------------------
    +--------------------------------------+                       +-------------------+
    |                      __    __        |        +--+           |      |^ ^|        |
    |                     /  \__/  \__     |        |  |           |      |___|        |
    |  _                 /___         \    |     +--+  +--+        |       \ /         |
    | / \ ____  ____         \__    __/    |     |        |        |       ###   #     |
    |/   /    \/    \           \__/       |     +--+  +--+        |   ###########     |
    |\              /                      |        |  |           |  #   #####        |
    | |  _          \                      |        +--+           |      #####        |
    | \_/ \_________/                      |                       |     #     #       |
    |           3.141592                   |                       |    ##     ##      |
    |          6535897932                  |                       |  ####     ####    |
    |         385626433832                 |                       +-------------------+
    |          7950288419                  |
    |           7169399                    |
    |             |  |                     |
    |             |  |                     |
    |             |  |                  <*>|
    |_____________|  |___________________|_|
    |                                      |
    |                                      |
    |                                      |
    +--------------------------------------+

                           +--------------------------+
                           |                          |
                           |                          |
                           +--------------------------+


                           +--------------------------+
                           |                          |
                           |                          |
                           +--------------------------+


                            +--------------------------------------+
                            |                      __    __        |
                            |                     /  \__/  \__     |
                            |  _                 /___         \    |
                            | / \ ____  ____         \__    __/    |
                            |/   /    \/    \           \__/       |
                            |\              /                      |
                            | |  _          \                      |
                            | \_/ \_________/                      |
                            |           3.141592                   |
                            |          6535897932                  |
                            |         385626433832    |^ ^|        |
                            |          7950288419     |___|        |
                            |           7169399        \ /         |
                            |             |  |         ###   #     |
                            |             |  |     ###########     |
                            |             |  |    #   #####     <*>|
                            |_____________|  |________#####______|_|
                            |                        #     #       |
                            |                       ##     ##      |
                            |                     ####     ####    |
                            +--------------------------------------+


-----------------------------------------------------------------------------------------------
                                         Hoja 0x05
Marquez, Somodi, Vanotti                   |                      Organización Del Computador 2
-----------------------------------------------------------------------------------------------


                  .-.
Implementación en |   :
                  `-'

    Ya que sabemos que el blit lo debemos posicionar abajo a la derecha de nuestra imagen
destino, utilizando la función MEMCPY extraída de la librería estándard de ANSI C para copiar
la imagen tal cual en el destino. Esto lo hacemos fila por fila, ya que no podemos pisar la
memoria que hay entre el final de una fila y la fila siguiente (width <= row_size), y tampoco
podemos asumir que src_row_size sea igual a dst_row_size.

    Una vez copiada toda la imagen, procedemos a copiar el blit, recorriendo fila por fila del
blit, columna por columna, copiando los píxeles que no son magenta en la imagen destino.

    Es probable, dependiendo del compilador con la que se haya compilado la LibC de la pc donde
corra el programa, que MEMCPY use instrucciones SSE para realizar la copia. Esto se tendrá en 
cuenta en el análisis de rendimiento.



                  .-. .-. .  . 
Implementación en |-| `-. |\/| :
                  ` ' `-' '  ` 

    Para la implementación en ASSEMBLER, aprovechamos lo mismo que en la implementación de C,
copiando primero todas las filas que no entren en el blit " a lo bruto", con la instrucción
movdqa para hacerlo de forma alineada y luego retrocediendo y usando la instrucción movdq para
los, a lo sumo, 15 bytes restantes.

    Una vez llegada a una fila en la que se debería insertar el blit, se van copiando las
columnas hasta llegar a la última que sea múltiplo de 16 sin que empiece formando parte del
blit, se copia, se vuelve al inicio del blit, y se aplica el blit de forma no alineada para 
source (en breve veremos en qué consiste aplicar el blit). Luego se vuelve a ir hacia donde 
nos habíamos quedado, y empezamos a aplicar el blit de forma alineada para source, pero 
desalineada para el blit. Esto es así ya que nada nos asegura que podamos realizar ambas copias
de forma alineada. Finalmente, llegamos a los últimos píxeles que no entran en un registro xmm
sin pisar la memoria fuera de la imagen, por esto, volvemos para atrás la cantidad necesaria
de bytes y volvemos a procesarlos de forma alineada, como hicimos en todos los ejercicios hasta
ahora.

    Aplicar el blit, hace referencia al proceso de mezclar los dos mapas de bit, el de origen
(source), y el del blit, sobre la imagen destino (dest). Esto lo hacemos usando comparaciones
y operaciones lógicas empaquetadas. Se tienen 4 píxeles contiguos cargados en un registro XMM, 
luego se utiliza la operación pcmpeqd que compara, de forma empaquetada, los double-words que
se encuentran en un registro contra los double-words de otro registro, en el cual tenemos 4
double-words con el píxel color magenta. Esto nos genera una máscara con unos en los
double-words que corresponden a píxeles magenta, y 0 donde no hay magenta. Al momento de 
combinarlas, si en el blit tenemos un pixel magenta, queremos que en dest prevalezca el pixel 
de source, si en el blit el píxel no es magenta, en dest debería prevalecer el píxel del blit.
Es por eso, que luego de hacer pcmpeqd, hacemos un pand entre los píxeles de source y los 
resultantes del pcmpeqd, de esta forma, nos quedarían sólo los píxeles de source que 
corresponden a píxeles magenta del blit; luego hacemos pandn entre el resultado de pcmpeqd y
el blit, quedandonos así con los píxeles del blit que no son magenta. Finalmente, combinamos 
ambos registros mediante la instrucción por, es claro ver que o nos queda un pixel de source
o nos queda un pixel de blit, y que no se nos mezclan. En esto consiste "aplicar el blit". 



-----------------------------------------------------------------------------------------------
                                         Hoja 0x06
Marquez, Somodi, Vanotti                   |                      Organización Del Computador 2
-----------------------------------------------------------------------------------------------

Source:
 +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
 |  Pixel 3  |  Pixel 2  |  Pixel 1  |  Pixel 0  |
 +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
 |15|14|13|12|11|10|09|08|07|06|05|04|03|02|01|00|
 +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+

Blit:
 +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
 |  MAGENTA  |Pixel 2blit|Pixel 1blit|  MAGENTA  |
 +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+-------------+
 |15|14|13|12|11|10|09|08|07|06|05|04|03|02|01|00|             |
 +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+             |
                                                            pcmpeqd----+
Mascara Magenta                                                |       |
 +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+             |       |
 |  MAGENTA  |  MAGENTA  |  MAGENTA  |  MAGENTA  |             |       |
 +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+-------------+       |
 |15|14|13|12|11|10|09|08|07|06|05|04|03|02|01|00|                     |
 +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+                     |
                                                                       |
                                                                       |
                                             +-------------------------+
                                             |
                                             |
                     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
                     |0xFFFFFFFF |0x00000000 |0x00000000 |0xFFFFFFFF |
                     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
                     |15|14|13|12|11|10|09|08|07|06|05|04|03|02|01|00|
                     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+  
                                             |
                                             |             
                         +-------------------+----------------------+
                         |                                          |
                      pand Source                              pandn Blit
                         |                                          |
 +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+                  |
 |  Pixel 3  |0x00000000 |0x00000000 |  Pixel 0  |                  |
 +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+                  |
 |15|14|13|12|11|10|09|08|07|06|05|04|03|02|01|00|                  |
 +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+                  |
                         |                                          |
                         |                  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
                         |                  |0x00000000 |Pixel 2blit|Pixel 1blit|0x00000000 |
                         |                  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
                         |                  |15|14|13|12|11|10|09|08|07|06|05|04|03|02|01|00|
                         |                  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
                         |                                          |
                         |                                          |
                         |                    por                   |
                         +---------------------+--------------------+
                                               |
                                               |
                       +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
                       |  Pixel 3  |Pixel 2blit|Pixel 1blit|  Pixel 0  |
                       +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
                       |15|14|13|12|11|10|09|08|07|06|05|04|03|02|01|00|
                       +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
-----------------------------------------------------------------------------------------------
                                         Hoja 0x07
Marquez, Somodi, Vanotti                   |                      Organización Del Computador 2
-----------------------------------------------------------------------------------------------

                  8b    d8  dP"Yb  88b 88  dP"Yb   dP""b8 88  88 88""Yb  dP"Yb  8b    d8 888888
                  88b  d88 dP   Yb 88Yb88 dP   Yb dP   `" 88  88 88__dP dP   Yb 88b  d88 88__  
                  88YbdP88 Yb   dP 88 Y88 Yb   dP Yb      888888 88"Yb  Yb   dP 88YbdP88 88""  
                  88 YY 88  YbodP  88  Y8  YbodP   YboodP 88  88 88  Yb  YbodP  88 YY 88 888888
                  
	El filtro monochrome permite lograr el un curioso efecto vintage, dando la apariencia de 
tratarse de fotografías antiguas. Para lograr dicho efecto basta con multiplicar cada canal por
una constante predefinida para el mismo, sumar los resultados y replicar dicho valor en los
tres canales. Digamos que es el retro de lo digital. Junto con sepia. Nada de cámara blanco y
negro para seguir la old-fashion. No, no, dame la PC que me hago el antiguo, dicen acá.
+----------+               +----------+              +----------+              +----------+
|  88""Yb  |               |  88""Yb  |              |  dP""b8  |              |  88""Yb  |
|  88__dP  |88888       __ |  88__dP  |  ·     __    | dP   `"  |  ·     _     |  88__dP  |
|  88      |       /\ /\ / |  88"Yb   | ---  /\  /|  | Yb  "88  | --- /\  ) |  |  88""Yb  |
|  88      |88888  \/.\// x|  88  Yb  |  ·   \/./ |x |  YboodP  |  ·  \/./_ |x |  88oodP  |
+----------+               +----------+              +----------+              +----------+
 
                        +----------+----------+----------+
                        |  88""Yb  |  88""Yb  |  88""Yb  |
                        |  88__dP  |  88__dP  |  88__dP  |
                        |  88      |  88      |  88      |
                        |  88      |  88      |  88      |
                        +----------+----------+----------+
                        
                        
                  .-.
Implementación en |   :
                  `-'
                  
	La implementación en C es bastante sencilla, recorriendo la imagen pixel a pixel y
aplicando la fórmula obtenemos el valor deseado. Luego lo replicamos en los tres canales del 
destino y obtenemos el resultado buscado.

                  .-. .-. .  . 
Implementación en |-| `-. |\/| :
                  ` ' `-' '  ` 

    Como tenemos que hacer operaciones aritméticas no enteras necesitamos tener cada número en
formato float para lo cual primero lo desempaquetamos de 8 a 32 bits, quedando los 4 pixels en
4 registros distintos. Y luego convertimos de enteros de 32bits a escalares de presición
simple, que también ocupan 32 bits. En ese momento procedemos a multiplicar por las constantes.
	Luego reempaquetamos con sumas horizontales y reconvertimos a enteros, teniendo así en los
 bytes 0, 4, 8 y 12 los valores requeridos para los pixels 3 2 1 y 0 respectivamente. Solo 
 resta replicar dichos valores en los canales que corresponden y esto lo hacemos a partir de la
instrucción pshufb.













-----------------------------------------------------------------------------------------------
                                         Hoja 0x08
Marquez, Somodi, Vanotti                   |                      Organización Del Computador 2
-----------------------------------------------------------------------------------------------	
                     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
                     |  Pixel 3  |  Pixel 2  |  Pixel 1  |  Pixel 0  |
                     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
                     |15|14|13|12|11|10|09|08|07|06|05|04|03|02|01|00|
                     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
                                             |
                                             |
                            punpck(l/h)bw + punpck(l/h)wd + cvtdq2ps
                                             |
                                             |
                                             |
                                             |	
                                             |
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
|  A Pix0   |  B Pix0   |  G Pix0   |  R Pix0   |
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+    x4  (Pix1, Pix2, Pix3, Pix4)
|15|14|13|12|11|10|09|08|07|06|05|04|03|02|01|00|
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
                        |
                        |
                        |
                        |
                        |
                        |
                        |                                    
                        |                                     CONSTANTES
                        |                  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
                        |                  |     0     |   0.21    |   0.71    |   0.07    |
                      mulps----------------+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
                        |                  |15|14|13|12|11|10|09|08|07|06|05|04|03|02|01|00|
                        |                  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
                        |
                        |
             haddps + haddps + haddps + cvtps2dq
                        |
                        |
                     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
                     |  Pixel 3  |  Pixel 2  |  Pixel 1  |  Pixel 0  |
                     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
                     |        |12|        |08|        |04|        |00|
                     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
                        |
                        |
                        |
                        |
                   pshufb (máscara 0x000F444F888FCCCF)
                        |
                        |
                        |
                     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
                     |  Pixel 3  |  Pixel 2  |  Pixel 1  |  Pixel 0  |
                     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
                     |15|14|13|12|11|10|09|08|07|06|05|04|03|02|01|00|
                     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+




-----------------------------------------------------------------------------------------------
                                         Hoja 0x09
Marquez, Somodi, Vanotti                   |                      Organización Del Computador 2
-----------------------------------------------------------------------------------------------	


                                                           .dP"Y8 888888 88""Yb 88    db    
                                                           `Ybo." 88__   88__dP 88   dPYb   
                                                           o.`Y8b 88""   88"""  88  dP__Yb  
                                                           8bodP' 888888 88     88 dP""""Yb



	Para obtener una imagen en tono sepia o también conocido como solarizar una fotografía
hemos recurrido al método provisto por la cátedra. Se debían sumar los 3 canales de cada pixel
y almacenar dicho resultado en los canales multiplicándolo por la constante correspondiente 
al canal en cuestión. Estas eran 0.5 para el canal R, 0.3 para el canal G y 0.2 para el canal 
B. De este modo se obtiene el característico tono ocre que antiguamente se utilizaba para
preservar por maś tiempo una fotografía en papel evitando el deterioro. Vale destacar que una
fotografía a la que se le aplica esté filtro podrá ser conservada por un largo período si
así se desea.

+----------+         +----------+       +----------+       +----------+
|  888888  |         |  88""Yb  |       |  dP""b8  |       |  88""Yb  |
|    88    |88888    |  88__dP  |  ||   | dP   `"  |  ||   |  88__dP  |
|    88    |         |  88"Yb   | ====  | Yb  "88  | ====  |  88""Yb  |
|    88    |88888    |  88  Yb  |  ||   |  YboodP  |  ||   |  88oodP  |
+----------+         +----------+       +----------+       +----------+
 
                        +----------+----------+----------+
                        |  888888  |  888888  |  888888  |
                        |    88    |    88    |    88    |
                        |    88    |    88    |    88    |
                        |    88    |    88    |    88    |
                        +----------+----------+----------+
                             |          |          |
                             |          |          |
                             |          |          |
                             v          v          v
                _  _        ___       ____       ____ 
               ( \/ )      / __)     ( __ \     (___ \
                )  (   _  (___ \   _  (__ (   _  / __/
               (_/\_)  (_)(____/  (_)(____/  (_)(____)
                             |          |          |
                             |          |          |
                             |          |          |
                             v          v          v
                        +----------+----------+----------+
                        |  88""Yb  |  dP""b8  |  88""Yb  |
                        |  88__dP  | dP   `"  |  88__dP  |
                        |  88"Yb   | Yb  "88  |  88""Yb  |
                        |  88  Yb  |  YboodP  |  88oodP  |
                        +----------+----------+----------+
                             
                           
                  .-. .-. .  . 
Implementación en |-| `-. |\/| :
                    ' `-' '  ` 
    Como tenemos que hacer operaciones aritméticas no enteras necesitamos tener cada número en
formato float para lo cual primero lo desempaquetamos de byte a word bits, quedando los 4 
pixels en 2 registros distintos. Procedemos a sumar horizontalmente obteniendo
las sumas de dos canales en 16 bits de presición otra vez en un solo registro.
-----------------------------------------------------------------------------------------------
                                         Hoja 0x0A
Marquez, Somodi, Vanotti                   |                      Organización Del Computador 2
-----------------------------------------------------------------------------------------------	
	Luego repetimos el procedimiento pero esta vez de word a doubleword, quedandome las cuatro 
sumas de los 4 canales, una por pixel, en 32 bits de presición. Paso a convertir los 
doublewords a escalares de presición simple, los mismos coinciden en tamaño. 
	Llegado a este punto los separo en 4 registros distintos, y luego utilizo un shuffle para 
replicar las correspondientes sumas temporales 4 veces en cada registro. Ahora solo resta 
multiplicar por las constantes que corresponden a cada canal, convertir nuevamente a enteros de
32 bits para reempaquetarlos de double a word y de word a byte progresivamente y guardarlos
en memoria. 

                     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
                     |  Pixel 3  |  Pixel 2  |  Pixel 1  |  Pixel 0  |
                     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
                     |15|14|13|12|11|10|09|08|07|06|05|04|03|02|01|00|
                     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
                                             |
                                             |
                            punpck(l/h)bw + phaddw + punpck(l/h)wd + phaddd + cvtdq2ps
                                             |
                                             |
                                             |
                                             |
                                             |
                                             |
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
| TMP Pix3  | TMP Pix2  | TMP Pix1  |  TMP Pix0 |
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+    
|15|14|13|12|11|10|09|08|07|06|05|04|03|02|01|00|
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
                        |
                        |
                        |
                        |
                       shufps x4, llevandome cada TMP a un registro distinto
                        |
                        |
                        |
                        |
                       pshufd en cada uno de esos registros, replicando el TMP 4 veces
                        |
                        |                                     CONSTANTES
                        |                  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
                        |                  |     0     |    0.5    |    0.3    |    0.2    |
                      mulps----------------+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
                        |                  |15|14|13|12|11|10|09|08|07|06|05|04|03|02|01|00|
                        |                  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
                        |
                        |
                        |
                    packusdw + packusdw + packuswb
                        |
                        |
                        |
                        |
                     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
                     |  Pixel 3  |  Pixel 2  |  Pixel 1  |  Pixel 0  |
                     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
                     |15|14|13|12|11|10|09|08|07|06|05|04|03|02|01|00|
                     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
-----------------------------------------------------------------------------------------------
                                         Hoja 0x0B
Marquez, Somodi, Vanotti                   |                      Organización Del Computador 2
-----------------------------------------------------------------------------------------------	

                                                           888888   8888b.     dP""b8   888888 
                                                           88__      8I  Yb   dP   `"   88__   
                                                           88""      8I  dY   Yb  "88   88""   
                                                           888888   8888Y"     YboodP   888888 

    Edge-Detection, que en castellano significa Detección de Bordes, es como se le llama al 
filtro que, tras aplicarlo a una imagen, nos deja sólo con los "bordes" de las figuras dentro
de ella. Se conoce como un borde a un punto en donde hubo un cambio bruzco de intensidad
de luz. Existen varias formas de detectar dichos bordes, una de ellas es calculando la 
derivada de la intensidad del brillo píxel a píxel. Para esto, se multiplica cada píxel y los
de su alrededor por valores que se corresponden con una matriz, y luego se suman todos de forma
saturada, dicho valor representaría la derivada en para ese píxel. La matriz usada es dada por
la cátedra, pertenece al operador de derivación de Laplace.

-----------------------------------------------------------------------------------------------
                                         Hoja 0xB
Marquez, Somodi, Vanotti                   |                      Organización Del Computador 2
-----------------------------------------------------------------------------------------------

  +--------------------------------------+    +--------------------------------------+
  |     ############################     |    |     +--------------------------+     |
  |     ############################     |    |     |                          |     |
  |                #######               |    |     +----------+     +---------+     |
  |                #######               |    |                |     |               |
  |                #######               |    |                |     |               |
  |                #######               |    |                |     |               |
  |                #######               |    |                |     |               |
  |                #######               |    |                |     |               |
  |                #######               |    |                |     |               |
  |    ####        #######               |    |    +--+        |     |               |
  |    ####        #######               |    |    |  |        |     |               |
  |    ####        #######               |    |    +--+        |     |               |
  |                #######               |    |                |     |               |
  |                #######               |    |                |     |               |
  |                #######               |    |                |     |               |
  |                #######               |    |                |     |               |
  |                #######               |    |                |     |               |
  |                #######               |    |                |     |               |
  |                #######               |    |                |     |               |
  |                #######               |    |                |     |               | 
  |                #######               |    |                |     |               | 
  |                #######               |    |                |     |               | 
  |                #######               |    |     +----------+     +---------+     | 
  |     ############################     |    |     |                          |     | 
  |     ############################     |    |     +--------------------------+     | 
  +--------------------------------------+    +--------------------------------------+ 
                  .-.
Implementación en |   :
                  `-'

    Arrancamos desde la fila 1, columna 1, y vamos sumando los valores en un int, columna por 
columna respetando la matriz, es decir, para el pixel en la posición y:1, x:1, sumamos los 
píxeles que corresponderían a la columna de la izquierda, multiplicandolos por los valores 
correspondientes según la matriz (0.5, 1, 0.5), luego para la columna central (1, -6, 1) y
finalmente para la columna de la derecha (0.5, 1, 0.5), luego de sumar todo esto en un int, 
lo saturamos, y ese sería el valor de la posición 1, 1. 

-----------------------------------------------------------------------------------------------
                                         Hoja 0x0C
Marquez, Somodi, Vanotti                   |                      Organización Del Computador 2
-----------------------------------------------------------------------------------------------

                  .-. .-. .  . 
Implementación en |-| `-. |\/| :
                  ` ' `-' '  ` 

    Se copia la fila anterior a la que contiene el pixel que se quiere procesar, se hacen 
2 copias, shifteando una un byte a la derecha con psrldq, y otra dos bytes a la derecha, 
con la misma instrucción. Luego se desempaquetan las partes bajas de todos estos registros, se 
multiplican los correspondientes por el valor de la matriz (para dividir por 2 utilizamos 
psraw shifteando a la derecha 1 bit).
    Se suman todos estos valores de forma empaquetada, y se procesa la fila central, utilizando
el mismo mecanismo visto anteriormente de shifteo. Para multiplicar por -6, se resta 6 veces el
registro, así evitamos convertir a punto flotante.
    La tercer y última fila se procesa de igual manera que la primera. Luego se suma todo y se
empaqueta a bytes, ese resultado se copia a la imagen destino. 

                         
                         Proceso de Shifteo de Columnas

                     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
                     |15|14|13|12|11|10|09|08|07|06|05|04|03|02|01|00| xmm0
                     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
                     |15|14|13|12|11|10|09|08|07|06|05|04|03|02|01|00|
                     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+

                     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
                     |00|15|14|13|12|11|10|09|08|07|06|05|04|03|02|01| xmm1
                     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
                     |15|14|13|12|11|10|09|08|07|06|05|04|03|02|01|00|
                     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+

                     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
                     |00|00|15|14|13|12|11|10|09|08|07|06|05|04|03|02| xmm2
                     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
                     |15|14|13|12|11|10|09|08|07|06|05|04|03|02|01|00|
                     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+

                  Desempaquetado (Se completa con 0's ya que son unsigned)

                     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
                     |  07 |  06 |  05 |  04 |  03 |  02 |  01 | 00  |
                     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+ xmm0
                     |15|14|13|12|11|10|09|08|07|06|05|04|03|02|01|00|
                     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+

                     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
                     |  08 |  07 |  06 |  05 |  04 |  03 |  02 |  01 |
                     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+ xmm1
                     |15|14|13|12|11|10|09|08|07|06|05|04|03|02|01|00|
                     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+

                     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
                     |  09 |  08 |  07 |  06 |  05 |  04 |  03 |  02 | 
                     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+ xmm2
                     |15|14|13|12|11|10|09|08|07|06|05|04|03|02|01|00|
                     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+



-----------------------------------------------------------------------------------------------
                                         Hoja 0x0D
Marquez, Somodi, Vanotti                   |                      Organización Del Computador 2
-----------------------------------------------------------------------------------------------

           Cada registro es multiplicado por el elemento correspondiente de la matriz
            y luego se suman todos, se carga la próxima fila y esto se repite hasta 
              procesar todas las filas. Finalmente, el resultado de la suma
                queda en un solo registro que se empaqueta y se manda a guardar.

                     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
                     |  p7 |  p6 |  p5 |  p4 |  p3 |  p2 |  p1 |  p0 | 
                     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+ xmm0
                     |15|14|13|12|11|10|09|08|07|06|05|04|03|02|01|00|
                     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
                                             | packuswb
                                             V
                     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
                     | 0| 0| 0| 0| 0| 0| 0| 0|p7|p6|p5|p4|p3|p2|p1|p0|
                     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+ xmm0
                     |15|14|13|12|11|10|09|08|07|06|05|04|03|02|01|00|
                     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+


                                      .dP"Y8  dP""b8    db    88     888888     oP"Yb. Yb  dP 
                                      `Ybo." dP   `"   dPYb   88     88__       "' dP'  YbdP  
                                      o.`Y8b Yb       dP__Yb  88  .o 88""         dP'   dPYb  
                                      8bodP'  YboodP dP""""Yb 88ood8 888888     .d8888 dP  Yb 


    De chicos todos soñamos con ser detectives y encontrar al ladrón que se robó las joyas tras
hacer un minuscioso peritaje sobre las filmaciones del edificio de enfrente de la escena del
crimen. Una herramienta fundamental para ello es poder hacer zoom sobre ciertos sectores de una
imagen, eso es lo que hace scale2x, escala el sector superior izquierdo de una imagen al doble 
de alto y ancho. 

 +--------------------------------------+           +--------------------------------------+
 |                  |2.71828182845904523|           |                                      |
 |  ##############  |5360287471352662497|           |     ############################     |
 |        ##        |7572470936999595749|           |     ############################     |
 |        ##        |6696762772407663035|           |                #######               |
 |        ##        |3547594571382178525|           |                #######               |
 |        ##        |1664274274663919320|           |                #######               |
 |        ##        |0305992181741359662|           |                #######               |
 |        ##        |9043572900334295260|           |                #######               |
 |        ##        |5956307381323286279|           |                #######               |
 |        ##        |4349076323382988075|           |                #######               |
 |  ##############  |3195251019011573834|           |                #######               |
 |                  |1879307021540891499|           |                #######               |
 +------------------+-------------------+ -> Scale  |                #######               |
 |.- -.-- ..- -.. .- .-.-.- .-.-.- / .  |           |                #######               |
 |... - --- -.-- / .- - .-. .- .--. .-  |           |                #######               |
 |-.. --- / . -. / . ... - . / - .-. .- |           |                #######               |
 |-... .- .--- --- / .--. .-. .- -.-. - |           |                #######               |
 |.. -.-. --- --..-- / ... --- .-.. --- |           |                #######               |
 | / .--. ..- . -.. --- / -.-. --- --   |           |                #######               |
 |..- -. .. -.-. .- .-. -- . / .--. --- |           |                #######               |
 |.-. / -.-. --- -.. .. --. --- / -- ---|           |                #######               |
 |.-. ... . --..-- / .--. --- .-. / ..-.|           |                #######               |
 |.- ...- --- .-. / -- .- -. -.. . -. / |           |     ############################     |
 |.- -.-- ..- -.. .-                    |           |     ############################     |
 |                                      |           |                                      |
 +------------------+-------------------+           +--------------------------------------+

     
-----------------------------------------------------------------------------------------------
                                         Hoja 0x0E
Marquez, Somodi, Vanotti                   |                      Organización Del Computador 2
-----------------------------------------------------------------------------------------------
                  .-.
Implementación en |   :
                  `-'

    Como todas las implementaciones en C hasta ahora, la implementación de este filtro resulta
bastante trivial. Recorremos fila por fila y columna por columna hasta la mitad de la imagen, 
y para cada píxel tenemos un arreglo de punteros que apuntan a los píxeles que van a quedar
en cada posición en la imagen final (a partir de cada píxel la imagen final tiene 4 píxeles más
basándose en los píxeles adyacentes al original). Se setean los punteros correctos basado en 
lo provisto por la cátedra y al final de dicha elección se copian a la imagen destino. 



                  .-. .-. .  . 
Implementación en |-| `-. |\/| :
                  ` ' `-' '  ` 

    Para poder escalar cada píxel, necesitamos de sus adyacentes, por lo cual, cargando 4
píxeles en un registro xmm, podremos escalar los dos del medio, resultando en 8 píxeles de la
imágen destino. Cargamos las fila correspondiente al píxel, así como también la fila superior
y la inferior. 

                     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
                     |  Pixel 3  |  Pixel 2  |  Pixel 1  |  Pixel 0  | 
                     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+ xmm0
                     |15|14|13|12|11|10|09|08|07|06|05|04|03|02|01|00|
                     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
                               Vamos a escalar Pixel 1 y Pixel 2


                     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
                     |           |           |           |           | Fila superior
                     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
                     |  Pixel 3  |  Pixel 2  |  Pixel 1  |  Pixel 0  | 
                     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
                     |           |           |           |           | Fila Inferior
                     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
                     |15|14|13|12|11|10|09|08|07|06|05|04|03|02|01|00|
                     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+

    Luego Shifteamos para comparar el pixel 0 con el 2 y el 1 con el 3.

                     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
                     |  Pixel 3  |  Pixel 2  |  Pixel 1  |  Pixel 0  | 
                     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
                     |0x00000000 |0x00000000 |  Pixel 3  |  Pixel 2  | 
                     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+

    Luego comparamos los píxeles correspondientes a 1 y 2 de la fila superior e inferior, y
finalmente shifteamos estos resultados para poder compararlos con los obtenidos recién, 
de esta forma, conseguimos tener el resultado de la condición impuesta en el enunciado 
(B == H || D == F), teniendo para cada píxel el resultado correspondiente.

    El resultado de esta máscada lo replicamos utilizando pshufd, de la siguiente forma





-----------------------------------------------------------------------------------------------
                                         Hoja 0x0F
Marquez, Somodi, Vanotti                   |                      Organización Del Computador 2
-----------------------------------------------------------------------------------------------

                     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
                     |           |           |B'=H'oD'=F'|B=H o D=F  | 
                     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
                                             |
                                      pshufd_magic_mask
                                             |
                     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
                     |B'=H'oD'=F'|B'=H'oD'=F'|B=H o D=F  |B=H o D=F  | 
                     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+

    Luego comezamos a aplicar máscaras para reordenar los píxeles que tenemos de forma que nos 
quede conveniente para procesar. Tanto en la fila superior, como en la inferior, reordenamos
los píxeles de la siguiente forma, ya que sólo nos interesan los que están arriba y abajo de 
cada píxel central. 

                     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
                     |  Pixel 3  |  Pixel 2  |  Pixel 1  |  Pixel 0  | 
                     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
                                             |
                                        pshufd-magic-mask-1
                                             |
                     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
                     |  Pixel 2  |  Pixel 2  |  Pixel 1  |  Pixel 1  | 
                     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+

    A los píxeles de la fila central los reordenamos de la siguiente forma

                     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
                     |  Pixel 3  |  Pixel 2  |  Pixel 1  |  Pixel 0  | 
                     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
                                             |
                                        pshufd-magic-mask-2
                                             |
                     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
                     |  Pixel 3  |  Pixel 1  |  Pixel 2  |  Pixel 0  | 
                     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+

    Pero, además, nos guardamos una copia de la fila central reordenada de la siguiente forma:

                     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
                     |  Pixel 3  |  Pixel 2  |  Pixel 1  |  Pixel 0  | 
                     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
                                             |
                                        pshufd-magic-mask-1
                                             |
                     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
                     |  Pixel 2  |  Pixel 2  |  Pixel 1  |  Pixel 1  | 
                     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+










-----------------------------------------------------------------------------------------------
                                         Hoja 0x10
Marquez, Somodi, Vanotti                   |                      Organización Del Computador 2
-----------------------------------------------------------------------------------------------

    Esto es porque si la condición original (B = H o D = F) da falso, necesitamos quedarnos con 
los píxeles en este orden.

    Ahora que ya tenemos los registros reordenados, comparamos el superior con el del medio, el
inferior con el del medio, y aplicamos ands y pands para quedarnos con los resultados que 
buscamos. Vamos a usar la nomenclatura dada por el enunciado para nombrar a cómo tenemos los 
píxeles, siendo BDEFH los correspondientes al píxel 1 y B'D'E'F'H' los correspondientes al 
píxel 2. 

                     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
                     |    B'     |     B'    |     B     |     B     |
                     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
                                             |
                                          pcmpeqd
                                             |
                     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
                     |    F'     |     D'    |     F     |     D     |
                     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+

    Con esto obtenemos la máscara para saber si en el resultado tiene que ir, la D o la E, 
usando pand y pandn, con paddusb obtenemos el valor que corresponda para cada píxel. Notar que
 hacer esto mismo para la fila inferior es análogo.





                                                                88""Yb 88     88   88 88""Yb 
                                                                88__dP 88     88   88 88__dP 
                                                                88""Yb 88  .o Y8   8P 88"Yb  
                                                                88oodP 88ood8 `YbodP' 88  Yb 



    Desenfocar es sin lugar a dudas uno de los principales y más usados filtros para aplicar
 sobre imágenes. ¿De qué otra forma podríamos evitar que ese amigo feo que tenemos sea tan 
llamativo  en una fotografía? Es por ello que en este trabajo práctico debemos realizar este
 filtro. El que se exija realizar una implementación eficiente utilizando SIMD para poder 
aplicar el filtro reiteradas veces, es algo que, por algún motivo que desconocemos, les era de
 particular interés a los profesores. ¿Será que sus amig... Mejor centrémonos. El filtro 
consiste en mezclar los píxeles cercanos para dar un efecto de desenfoque. Precisando, un 
píxel dado se calcula obteniendo el promedio de los 13 píxeles que distan menos de tres en 
la norma Manhattan. El promedio se calcula canal a canal.


                  .-. .-. .  . 
Implementación en |-| `-. |\/| :
                  ` ' `-' '  ` 









-----------------------------------------------------------------------------------------------
                                         Hoja 0x11
Marquez, Somodi, Vanotti                   |                      Organización Del Computador 2
-----------------------------------------------------------------------------------------------
    Para aprovechar mejor las instrucciones SSE es importante observar con detalle el filtro 
que se necesita implementar. Como procesaremos 4 píxeles a vez, es bueno ver bien qué píxeles 
entran en juego y qué rol cumplen. Un gráfico nos ayudará a aclarar esta cuestión:

      +-+-+-+-+          +-+-+-+-+          +-+-+-+-+          +-+-+-+-+          +-+-+-+-+    
      | | | | |          |*| | | |          | |*| | |          | | |*| |          | | | |*|    
    +-+-+-+-+-+-+      +-+-+-+-+-+-+      +-+-+-+-+-+-+      +-+-+-+-+-+-+      +-+-+-+-+-+-+  
    | | | | | | |      |*|*|*| | | |      | |*|*|*| | |      | | |*|*|*| |      | | | |*|*|*|  
  +-+-+-+-+-+-+-+-+  +-+-+-+-+-+-+-+-+  +-+-+-+-+-+-+-+-+  +-+-+-+-+-+-+-+-+  +-+-+-+-+-+-+-+-+
  | | |A|B|C|D| | |  |*|*|A|*|*| | | |  | |*|*|B|*|*| | |  | | |*|*|C|*|*| |  | | | |*|*|D|*|*|
  +-+-+-+-+-+-+-+-+  +-+-+-+-+-+-+-+-+  +-+-+-+-+-+-+-+-+  +-+-+-+-+-+-+-+-+  +-+-+-+-+-+-+-+-+
    | | | | | | |      |*|*|*| | | |      | |*|*|*| | |      | | |*|*|*| |      | | | |*|*|*|  
    +-+-+-+-+-+-+      +-+-+-+-+-+-+      +-+-+-+-+-+-+      +-+-+-+-+-+-+      +-+-+-+-+-+-+  
      | | | | |          |*| | | |          | |*| | |          | | |*| |          | | | |*|    
      +-+-+-+-+          +-+-+-+-+          +-+-+-+-+          +-+-+-+-+          +-+-+-+-+    

    En la primera imagen vemos los píxeles que deseamos procesar y todos los píxeles que se 
involucran. En las siguientes imágenes vemos píxel a píxel de los que deseamos procesar, 
cuáles son los píxeles involucrados. Todos se promedian de la misma manera, por lo que 
podríamos decir que juegan el mismo rol.

    Para guardar estos píxles en memoria, decidimos acomodarlos de la sigueinte manera:
      +-+-+-+-+    
      | xmm0  |    
  +-+-+-+-+-+-+-+-+  
  | xmm1  | xmm2  |  
  +-+-+-+-+-+-+-+-+
  | xmm3  | xmm4  |
  +-+-+-+-+-+-+-+-+
  | xmm5  | xmm6  | 
  +-+-+-+-+-+-+-+-+ 
      | xmm7  |    
      +-+-+-+-+    

    Donde A y B se encuentran en una mitad de xmm3, C y D en la otra de xmm4, y además 
xmm1, xmm2, xmm5 y xmm6 cada uno posee un pixel que no nos sirve.

    Lo interesante del asunto es que las dos primeras filas juegan exactamente el mismo rol que 
las dos últimas. Ignorando el posible overflow, hay que ejecutar exactamente las mismas 
instrucciones para procesar lo correspondiente a xmm1, xmm5 o xmm1+xmm5 (donde el + representa 
la suma componente a componente). El tema del overflow se soluciona un unpack de byte a word.
Por otro lado, xmm2 se procesa de fora simétrica a xmm1 y xmm4 se procesa de forma simétrica 
a xmm3. Por lo que hay sólo tres tipos de procesados que son únicos. El resto son formas 
distintas de aplicar esto. Más aún, antes de procesar xmm1, nos encargamos de desempaquetarlo 
y le sumamos xmm5 desempaquetado, procesando ambos registros de una sola vez. Un hecho extra 
interesante es que también le sumamos xmm3, dejando sólo una parte de xmm3 sin procesar que, 
como veremos, resulta muy sencilla de procesar. De forma completamente simétrica procesamos 
xmm2 + xmm4 + xmm6.

    Después de tanta cháchara pasemos a explicar cómo hacemos esto. Para el procesamiento de 
píxeles, nosotros tendremos dos registros xmm14 y xmm15 donde iremos guardando las sumas de 
todos los píxeles que correspondan. En xmm14 estarán los valores correspondientes a A y B y 
en xmm15 los correspondientes a C y D. Una vez sumado todo lo correspondiente, se pasa a 
dividir por 13 cada componente, siendo lo que quede el resultado correspondiente a cada pixel.




-----------------------------------------------------------------------------------------------
                                         Hoja 0x12
Marquez, Somodi, Vanotti                   |                      Organización Del Computador 2
-----------------------------------------------------------------------------------------------

                                        Centrémonos en xmm1:
                                             +-+-+-+-+    
                                             | | | | |    
                                         +-+-+-+-+-+-+-+  
                                         | |X|Y|Z| | | |  
                                         +-+-+-+-+-+-+-+-+
                                         | | |A|B|C|D| | |
                                         +-+-+-+-+-+-+-+-+
                                           | |E|F| | | |  
                                           +-+-+-+-+-+-+  
                                             | | | | |    
                                             +-+-+-+-+    

    Lo que nosotros sabemos es que X, Y y Z influyen en el resultado de A, Y, Z en el de B y Z 
sólo en el de C. Como todo tiene el mismo rol, sumar antes de sacarse el promedio, por influir 
nos referimos a que van a ser sumados en la parte correspondiente de los registros 
xmm14 y xmm15
    Para notar el procesamiento paralelo en esto, lo que nosotros hacemos es lo siguiente:
        * Sumamos X a A
        * Sumamos al mismo tiempo Y y Z a A y B respectivamente
        * Invertimos las posiciones de Y y Z
        * Sumamos Z e Y a A y B respectivamente
        * Limpiamos Y dejando sólo a Z donde se encontraba
        * Sumamos Z a C
    En este último texto por A, B y C nos referimos a las posiciones correctas de xmm14 y xmm15
 que contienen los resultados temporales que irán a parar a las posiciones de A, B y C.

    Sólo por esta funciones mostraremos el snippet del código de asm para dejar en claro cómo 
es el procesado. Las otras otras partes no diferirán demasiado y por lo tanto llegado el 
momento las obviaremos:

        movdqa xmm8, xmm1          
        punpckhbw xmm8, xmm13            ;xmm8 = Y      , Z
        movdqa xmm9, xmm3
        punpckhbw xmm9, xmm13
        paddusw xmm15, xmm9
        paddusw xmm8, xmm9               ;xmm8 = Y + A  , Z + B
        movdqa xmm9, xmm5
        punpckhbw xmm9, xmm13
        paddusw xmm8, xmm9               ;xmm8 = Y + A + E, Z + B + F
        paddusw xmm14, xmm8              ;xmm14+= Y = A = E, Z = B + F
        pshufd xmm8, xmm8, invertmask    ;xmm8 = Z + B + F, Y + A + E
        paddusw xmm14, xmm8              ;xmm14 += Z + B + F, Y + A + E
        pslldq xmm8, 8                   ;xmm8 = 0          , Z + B + F
        psrldq xmm8, 8                   ;xmm8 = Z + B + F, 0
        paddusw xmm15, xmm8              ;xmm15+= Z + B + F, 0

    Donde en el registro xmm8 se ponen las sumas de la parte alta xmm1, xmm3 y xmm5 
(Y + A + E en una componente y Z + B + F en la otra) invertmask es una máscara que cambia de 
lugar los quadwords de xmm8, las instrucciones pslldq y pslrdq se utilizand para limpiar la 
mitad del registro xmm8 y xmm13 contiene todos ceros. La instrucción paddusw xmm15, xmm9 que
 está colgadísima en este lugar nos simplifica la vida a la hora de procesar lo que nos fata 
de xmm1, que luego veremos cuándo sucede.

Oh, sí, como decía mi abuelo: nada más claro que assembly para entender cómo funciona un 
programa.


-----------------------------------------------------------------------------------------------
                                         Hoja 0x13
Marquez, Somodi, Vanotti                   |                      Organización Del Computador 2
-----------------------------------------------------------------------------------------------

Las dos formas restantes de procesar son bastante más sencillas:
     +-+-+-+-+          +-+-+-+-+     
     |X|Y| | |          | | | | |     
   +-+-+-+-+-+-+      +-+-+-+-+-+-+   
   | | | | | | |      | | | | | | |   
 +-+-+-+-+-+-+-+-+  +-+-+-+-+-+-+-+-+ 
 | | |A|B| | | | |  |X|Y|A|B|Z|W| | | 
 +-+-+-+-+-+-+-+-+  +-+-+-+-+-+-+-+-+ 
   | | | | | | |      | | | | | | |   
   +-+-+-+-+-+-+      +-+-+-+-+-+-+   
     | | | | |          | | | | |     
     +-+-+-+-+          +-+-+-+-+     

    Si hasta acá el proceso pudo ser comprendido, entonces se puede ver que para procesar 
xmm0 y xmm7 basta sumarlos directamente sobre el resultado (sumándose X en A e Y en B, más los 
respectivos valores de xmm7) y para procesar xmm3 y xmm4, hay que sumar X y Z en A e Y y 
W en B. También falta la parte completamente simétrica de xmm2, xmm4 y xmm6, pero por tal 
simetría nos ahorraremos las explicaciones. Basta con observar que tanto para A como para B, 
cada uno de los píxeles que se necesitaban fueron sumados, salvo uno de B (pero sumamos dos 
de C que al momento del procesamiento simétrico se corresponderá con los faltantes en B).
De este modo, en xmm14 y xmm15 tenemos las sumas correspondientes a los píxeles A, B, C y D 
canal a canal. Lo restante es desempaquetar una vez más, convertir a floating points, dividir 
por trece, reempaquetar todo y pasarlo a dst.



                  .-.
Implementación en |   :
                  `-' 

La implementación es C es bastante straightfoward. No difiere mucho con las otras funciones,
se procesa píxel por píxel, recorriendo fila por fila y columna por columna, haciendo la 
cuentita para cada píxel. 

























-----------------------------------------------------------------------------------------------
                                         Hoja 0x14
Marquez, Somodi, Vanotti                   |                      Organización Del Computador 2
-----------------------------------------------------------------------------------------------
  ___   _   _   ___   _     _____ _____ _____ _____ 
 / _ \ | \ | | / _ \ | |   |_   _/  ___|_   _/  ___|
/ /_\ \|  \| |/ /_\ \| |     | | \ `--.  | | \ `--. 
|  _  || . ` ||  _  || |     | |  `--. \ | |  `--. \
| | | || |\  || | | || |_____| |_/\__/ /_| |_/\__/ /
\_| |_/\_| \_/\_| |_/\_____/\___/\____/ \___/\____/ 


Se comparó la eficiencia de las implementaciones en C y en ASM com SSE. El resultado general 
es que las implementaciones en ASM son más eficienes que las de C.

Para realizar esta comparación se corrieron todos los filtros con todas las imágenes con cada 
implementación 40 veces cada combinación.

Veremos de forma puntual los resultados con una imagen en particular, pero adjuntaremos, 
aunque de forma desagradable, los resultados con todas las corridas.

Tomaremos como ejemplo la imagen de lena de 1024

Los resultados fueron:

blit           asm    ciclos: 162258576    ciclos por llamada: 4056464.500
blit           c      ciclos: 365623200    ciclos por llamada: 9140580.000
blur           asm    ciclos: 1119204100   ciclos por llamada: 27980102.000
blur           c      ciclos: 11412049068  ciclos por llamada: 285301216.000
edge           asm    ciclos: 164348024    ciclos por llamada: 4108700.750
edge           c      ciclos: 3306667652   ciclos por llamada: 82666696.000
monocromatizar asm    ciclos: 221693312    ciclos por llamada: 5542333.000
monocromatizar c      ciclos: 2102472740   ciclos por llamada: 52561816.000
rotar          asm    ciclos: 152051860    ciclos por llamada: 3801296.500
rotar          c      ciclos: 1724751136   ciclos por llamada: 43118776.000
scale2x        asm    ciclos: 143656564    ciclos por llamada: 3591414.000
scale2x        c      ciclos: 5252119656   ciclos por llamada: 131302992.000
sepia          asm    ciclos: 307983036    ciclos por llamada: 7699576.000
sepia          c      ciclos: 2708022848   ciclos por llamada: 67700568.000
smalltiles     asm    ciclos: 127812784    ciclos por llamada: 3195319.500
smalltiles     c      ciclos: 2171503312   ciclos por llamada: 54287584.000

    Como se puede observar en este caso en particular, las implementaciones en asm para esta 
imagen fueron significativamente más eficientes. Salvo blit que por tener poca lógica y 
tener que competir contra memcpy muchas posibilidades de arrasar no tenía, todos los otros 
filtros han sido por lo menos casi 10 veces más rápidos. Destacando el casi de scale2x que 
fue 36 veces más rápido en asm que en C.

    Pero lo importante no es observar que nuestras implementaciones han tenido la destacada 
peculiaridad de ser más eficientes cuando las hicimos en ASM que cuando las hicimos en C. 
La moraleja que hay que destacar está más relacionada con los motivos que no sólo hicieron 
que esto sucediera de esta manera, sino que hasta sugerían previamente que un resultado 
semejante a este se puede realizar.
    El quid de la cuestión se haya en el uso de las funciones SSE. Este set de instrucciones 
le permitieron a las funciones en ASM operar con mucho mayor volumen de datos en la misma 
cantidad de operaciones. Las operaciones SSE no sólo permitieron calcular varios píxeles en 
cada iteración de los ciclos que conformaban los filtros, sino que incluso permitían operar 
sobre varios canales a la vez. Mientras que desde el código de C se tuvo que trabajar píxel 
a píxel y, en muchas ocasiones, canal a canal.




-----------------------------------------------------------------------------------------------
                                         Hoja 0x15
Marquez, Somodi, Vanotti                   |                      Organización Del Computador 2
-----------------------------------------------------------------------------------------------
 _____ _   _  _____    _   _ _____  _   __   __     ___   _   _  _______   __
|_   _| | | ||  ___|   | | | |  __ \| |  \ \ / /    / _ \ | \ | ||  ___\ \ / /
  | | | |_| || |__     | | | | |  \/| |   \ V /    / /_\ \|  \| || |__  \ V / 
  | | |  _  ||  __|    | | | | | __ | |    \ /     |  _  || . ` ||  __| /   \ 
  | | | | | || |___    | |_| | |_\ \| |____| |     | | | || |\  || |___/ /^\ \
  \_/ \_| |_/\____/     \___/ \____/\_____/\_/     \_| |_/\_| \_/\____/\/   \/

The Ugly Annex

Este anexo contiene todos los resultados de los tests de performance. 
Es feo y está para mostrar que:

1. No se eligió lena1024x1024 por nada en particular en cuanto a performance, 
        sino porque fue una imagen de referencia para el grupo.
2. Los tests se corrieron!

blit asm en bosque1024x1024.jpg 	 ciclos: 158548700 	cpl: 3963717.500
blit c en bosque1024x1024.jpg 	 ciclos: 367993849 	cpl: 9199846.000
blit asm en bosque1123x1203.jpg 	 ciclos: 194424068 	cpl: 4860601.500
blit c en bosque1123x1203.jpg 	 ciclos: 401531772 	cpl: 10038294.000
blit asm en bosque1637x947.jpg 	 ciclos: 253889256 	cpl: 6347231.000
blit c en bosque1637x947.jpg 	 ciclos: 442903756 	cpl: 11072594.000
blit asm en bosque256x256.jpg 	 ciclos: 3450512 	cpl: 86262.797
blit c en bosque256x256.jpg 	 ciclos: 17441604 	cpl: 436040.094
blit asm en bosque4000x3000.jpg 	 ciclos: 1781885428 	cpl: 44547136.000
blit c en bosque4000x3000.jpg 	 ciclos: 2042159292 	cpl: 51053980.000
blit asm en bosque557x2729.jpg 	 ciclos: 219735444 	cpl: 5493386.000
blit c en bosque557x2729.jpg 	 ciclos: 439938548 	cpl: 10998464.000
blit asm en bosque883x977.jpg 	 ciclos: 130943996 	cpl: 3273600.000
blit c en bosque883x977.jpg 	 ciclos: 336497780 	cpl: 8412445.000
blit asm en lena1024x1024.jpg 	 ciclos: 162258576 	cpl: 4056464.500
blit c en lena1024x1024.jpg 	 ciclos: 365623200 	cpl: 9140580.000
blit asm en lena1123x1203.jpg 	 ciclos: 198733960 	cpl: 4968349.000
blit c en lena1123x1203.jpg 	 ciclos: 410423300 	cpl: 10260582.000
blit asm en lena1637x947.jpg 	 ciclos: 233832772 	cpl: 5845819.000
blit c en lena1637x947.jpg 	 ciclos: 447525464 	cpl: 11188137.000
blit asm en lena256x256.jpg 	 ciclos: 3418752 	cpl: 85468.797
blit c en lena256x256.jpg 	 ciclos: 16522896 	cpl: 413072.406
blit asm en lena557x2729.jpg 	 ciclos: 225615328 	cpl: 5640383.000
blit c en lena557x2729.jpg 	 ciclos: 443814376 	cpl: 11095359.000
blit asm en lena883x977.jpg 	 ciclos: 132450876 	cpl: 3311272.000
blit c en lena883x977.jpg 	 ciclos: 336545516 	cpl: 8413638.000
blit asm en vinedo1024x1024.jpg 	 ciclos: 173893340 	cpl: 4347333.500
blit c en vinedo1024x1024.jpg 	 ciclos: 364629380 	cpl: 9115734.000
blit asm en vinedo1123x1203.jpg 	 ciclos: 206806920 	cpl: 5170173.000
blit c en vinedo1123x1203.jpg 	 ciclos: 405792856 	cpl: 10144822.000
blit asm en vinedo1637x947.jpg 	 ciclos: 225207772 	cpl: 5630194.500
blit c en vinedo1637x947.jpg 	 ciclos: 431818700 	cpl: 10795467.000
blit asm en vinedo256x256.jpg 	 ciclos: 3062244 	cpl: 76556.102
blit c en vinedo256x256.jpg 	 ciclos: 16691296 	cpl: 417282.406
blit asm en vinedo4000x3000.jpg 	 ciclos: 1783964000 	cpl: 44599100.000
blit c en vinedo4000x3000.jpg 	 ciclos: 2069137576 	cpl: 51728440.000
blit asm en vinedo557x2729.jpg 	 ciclos: 244089688 	cpl: 6102242.500
blit c en vinedo557x2729.jpg 	 ciclos: 441874556 	cpl: 11046864.000
blit asm en vinedo883x977.jpg 	 ciclos: 140604776 	cpl: 3515119.250
blit c en vinedo883x977.jpg 	 ciclos: 336479424 	cpl: 8411986.000
blur asm en bosque1024x1024.jpg 	 ciclos: 1125293948 	cpl: 28132348.000
blur c en bosque1024x1024.jpg 	 ciclos: 11391752920 	cpl: 284793824.000
blur asm en bosque1123x1203.jpg 	 ciclos: 1412020804 	cpl: 35300520.000
-----------------------------------------------------------------------------------------------
                                         Hoja 0x16

Marquez, Somodi, Vanotti                   |                      Organización Del Computador 2
-----------------------------------------------------------------------------------------------
blur c en bosque1123x1203.jpg 	 ciclos: 14810067072 	cpl: 370251680.000
blur asm en bosque1637x947.jpg 	 ciclos: 1619203932 	cpl: 40480100.000
blur c en bosque1637x947.jpg 	 ciclos: 17219281180 	cpl: 430482016.000
blur asm en bosque256x256.jpg 	 ciclos: 70609140 	cpl: 1765228.375
blur c en bosque256x256.jpg 	 ciclos: 719247002 	cpl: 17981174.000
blur asm en bosque4000x3000.jpg 	 ciclos: 12579686402 	cpl: 314492160.000
blur c en bosque4000x3000.jpg 	 ciclos: 131431650436 	cpl: 3285791232.000
blur asm en bosque557x2729.jpg 	 ciclos: 1576377748 	cpl: 39409444.000
blur c en bosque557x2729.jpg 	 ciclos: 16558468520 	cpl: 413961696.000
blur asm en bosque883x977.jpg 	 ciclos: 899444040 	cpl: 22486100.000
blur c en bosque883x977.jpg 	 ciclos: 9434558292 	cpl: 235863968.000
blur asm en lena1024x1024.jpg 	 ciclos: 1119204100 	cpl: 27980102.000
blur c en lena1024x1024.jpg 	 ciclos: 11412049068 	cpl: 285301216.000
blur asm en lena1123x1203.jpg 	 ciclos: 1409279344 	cpl: 35231984.000
blur c en lena1123x1203.jpg 	 ciclos: 14756822204 	cpl: 368920544.000
blur asm en lena1637x947.jpg 	 ciclos: 1621224836 	cpl: 40530620.000
blur c en lena1637x947.jpg 	 ciclos: 16916691024 	cpl: 422917280.000
blur asm en lena256x256.jpg 	 ciclos: 66719376 	cpl: 1667984.375
blur c en lena256x256.jpg 	 ciclos: 695221580 	cpl: 17380540.000
blur asm en lena557x2729.jpg 	 ciclos: 1584499584 	cpl: 39612488.000
blur c en lena557x2729.jpg 	 ciclos: 16611139264 	cpl: 415278496.000
blur asm en lena883x977.jpg 	 ciclos: 898895452 	cpl: 22472386.000
blur c en lena883x977.jpg 	 ciclos: 9408414432 	cpl: 235210368.000
blur asm en vinedo1024x1024.jpg 	 ciclos: 1121802832 	cpl: 28045072.000
blur c en vinedo1024x1024.jpg 	 ciclos: 11451905956 	cpl: 286297664.000
blur asm en vinedo1123x1203.jpg 	 ciclos: 1411128264 	cpl: 35278208.000
blur c en vinedo1123x1203.jpg 	 ciclos: 14745805252 	cpl: 368645120.000
blur asm en vinedo1637x947.jpg 	 ciclos: 1619494868 	cpl: 40487372.000
blur c en vinedo1637x947.jpg 	 ciclos: 16967848648 	cpl: 424196224.000
blur asm en vinedo256x256.jpg 	 ciclos: 66847604 	cpl: 1671190.125
blur c en vinedo256x256.jpg 	 ciclos: 695340468 	cpl: 17383512.000
blur asm en vinedo4000x3000.jpg 	 ciclos: 12552530740 	cpl: 313813280.000
blur c en vinedo4000x3000.jpg 	 ciclos: 132247850628 	cpl: 3306196224.000
blur asm en vinedo557x2729.jpg 	 ciclos: 1598490484 	cpl: 39962264.000
blur c en vinedo557x2729.jpg 	 ciclos: 16618694132 	cpl: 415467328.000
blur asm en vinedo883x977.jpg 	 ciclos: 904717848 	cpl: 22617946.000
blur c en vinedo883x977.jpg 	 ciclos: 9528036990 	cpl: 238200928.000
edge asm en bosque1024x1024.jpg 	 ciclos: 164488516 	cpl: 4112212.750
edge c en bosque1024x1024.jpg 	 ciclos: 3279611900 	cpl: 81990296.000
edge asm en bosque1123x1203.jpg 	 ciclos: 215526340 	cpl: 5388158.500
edge c en bosque1123x1203.jpg 	 ciclos: 4202305584 	cpl: 105057640.000
edge asm en bosque1637x947.jpg 	 ciclos: 253493668 	cpl: 6337341.500
edge c en bosque1637x947.jpg 	 ciclos: 4892712368 	cpl: 122317808.000
edge asm en bosque256x256.jpg 	 ciclos: 7366432 	cpl: 184160.797
edge c en bosque256x256.jpg 	 ciclos: 220772844 	cpl: 5519321.000
edge asm en bosque4000x3000.jpg 	 ciclos: 1872068560 	cpl: 46801716.000
edge c en bosque4000x3000.jpg 	 ciclos: 36810057890 	cpl: 920251520.000
edge asm en bosque557x2729.jpg 	 ciclos: 245816772 	cpl: 6145419.000
edge c en bosque557x2729.jpg 	 ciclos: 4692620908 	cpl: 117315520.000
edge asm en bosque883x977.jpg 	 ciclos: 135416728 	cpl: 3385418.500
edge c en bosque883x977.jpg 	 ciclos: 2684178416 	cpl: 67104460.000
edge asm en lena1024x1024.jpg 	 ciclos: 164348024 	cpl: 4108700.750
edge c en lena1024x1024.jpg 	 ciclos: 3306667652 	cpl: 82666696.000




-----------------------------------------------------------------------------------------------
                                         Hoja 0x17

Marquez, Somodi, Vanotti                   |                      Organización Del Computador 2
-----------------------------------------------------------------------------------------------
edge asm en lena1123x1203.jpg 	 ciclos: 215409972 	cpl: 5385249.000
edge c en lena1123x1203.jpg 	 ciclos: 4257668768 	cpl: 106441720.000
edge asm en lena1637x947.jpg 	 ciclos: 249885056 	cpl: 6247126.500
edge c en lena1637x947.jpg 	 ciclos: 4857051672 	cpl: 121426288.000
edge asm en lena256x256.jpg 	 ciclos: 7369860 	cpl: 184246.500
edge c en lena256x256.jpg 	 ciclos: 208699344 	cpl: 5217483.500
edge asm en lena557x2729.jpg 	 ciclos: 244975120 	cpl: 6124378.000
edge c en lena557x2729.jpg 	 ciclos: 4799229864 	cpl: 119980752.000
edge asm en lena883x977.jpg 	 ciclos: 133883568 	cpl: 3347089.250
edge c en lena883x977.jpg 	 ciclos: 2720428824 	cpl: 68010720.000
edge asm en vinedo1024x1024.jpg 	 ciclos: 164473540 	cpl: 4111838.500
edge c en vinedo1024x1024.jpg 	 ciclos: 3287730964 	cpl: 82193272.000
edge asm en vinedo1123x1203.jpg 	 ciclos: 215281728 	cpl: 5382043.000
edge c en vinedo1123x1203.jpg 	 ciclos: 4222818428 	cpl: 105570456.000
edge asm en vinedo1637x947.jpg 	 ciclos: 249437588 	cpl: 6235939.500
edge c en vinedo1637x947.jpg 	 ciclos: 4815722716 	cpl: 120393064.000
edge asm en vinedo256x256.jpg 	 ciclos: 7310732 	cpl: 182768.297
edge c en vinedo256x256.jpg 	 ciclos: 205668584 	cpl: 5141714.500
edge asm en vinedo4000x3000.jpg 	 ciclos: 1890416576 	cpl: 47260416.000
edge c en vinedo4000x3000.jpg 	 ciclos: 37131020152 	cpl: 928275456.000
edge asm en vinedo557x2729.jpg 	 ciclos: 246311656 	cpl: 6157791.000
edge c en vinedo557x2729.jpg 	 ciclos: 4710681132 	cpl: 117767024.000
edge asm en vinedo883x977.jpg 	 ciclos: 134163492 	cpl: 3354087.250
edge c en vinedo883x977.jpg 	 ciclos: 2709164352 	cpl: 67729104.000
monocromatizar asm en bosque1024x1024.jpg 	 ciclos: 220073208 	cpl: 5501830.500
monocromatizar c en bosque1024x1024.jpg 	 ciclos: 2104762044 	cpl: 52619048.000
monocromatizar asm en bosque1123x1203.jpg 	 ciclos: 280211456 	cpl: 7005286.500
monocromatizar c en bosque1123x1203.jpg 	 ciclos: 2706027172 	cpl: 67650680.000
monocromatizar asm en bosque1637x947.jpg 	 ciclos: 369778204 	cpl: 9244455.000
monocromatizar c en bosque1637x947.jpg 	 ciclos: 3129447928 	cpl: 78236200.000
monocromatizar asm en bosque256x256.jpg 	 ciclos: 12172724 	cpl: 304318.094
monocromatizar c en bosque256x256.jpg 	 ciclos: 133371188 	cpl: 3334279.500
monocromatizar asm en bosque4000x3000.jpg 	 ciclos: 2578224700 	cpl: 64455616.000
monocromatizar c en bosque4000x3000.jpg 	 ciclos: 24036577948 	cpl: 600914432.000
monocromatizar asm en bosque557x2729.jpg 	 ciclos: 322496188 	cpl: 8062405.000
monocromatizar c en bosque557x2729.jpg 	 ciclos: 3057084708 	cpl: 76427120.000
monocromatizar asm en bosque883x977.jpg 	 ciclos: 181024532 	cpl: 4525613.000
monocromatizar c en bosque883x977.jpg 	 ciclos: 1727019428 	cpl: 43175484.000
monocromatizar asm en lena1024x1024.jpg 	 ciclos: 221693312 	cpl: 5542333.000
monocromatizar c en lena1024x1024.jpg 	 ciclos: 2102472740 	cpl: 52561816.000
monocromatizar asm en lena1123x1203.jpg 	 ciclos: 286443864 	cpl: 7161097.000
monocromatizar c en lena1123x1203.jpg 	 ciclos: 2711116512 	cpl: 67777912.000
monocromatizar asm en lena1637x947.jpg 	 ciclos: 327670224 	cpl: 8191755.000
monocromatizar c en lena1637x947.jpg 	 ciclos: 3117655380 	cpl: 77941384.000
monocromatizar asm en lena256x256.jpg 	 ciclos: 12054668 	cpl: 301366.688
monocromatizar c en lena256x256.jpg 	 ciclos: 131111668 	cpl: 3277791.500
monocromatizar asm en lena557x2729.jpg 	 ciclos: 318082920 	cpl: 7952073.000
monocromatizar c en lena557x2729.jpg 	 ciclos: 3049795648 	cpl: 76244888.000
monocromatizar asm en lena883x977.jpg 	 ciclos: 178501256 	cpl: 4462531.000
monocromatizar c en lena883x977.jpg 	 ciclos: 1732782628 	cpl: 43319564.000
monocromatizar asm en vinedo1024x1024.jpg 	 ciclos: 218715860 	cpl: 5467896.500
monocromatizar c en vinedo1024x1024.jpg 	 ciclos: 2107140648 	cpl: 52678516.000
monocromatizar asm en vinedo1123x1203.jpg 	 ciclos: 280130452 	cpl: 7003261.500
monocromatizar c en vinedo1123x1203.jpg 	 ciclos: 2698246632 	cpl: 67456168.000
monocromatizar asm en vinedo1637x947.jpg 	 ciclos: 332355220 	cpl: 8308881.000
monocromatizar c en vinedo1637x947.jpg 	 ciclos: 3114411000 	cpl: 77860272.000
monocromatizar asm en vinedo256x256.jpg 	 ciclos: 12404120 	cpl: 310103.000
monocromatizar c en vinedo256x256.jpg 	 ciclos: 131066956 	cpl: 3276674.000
-----------------------------------------------------------------------------------------------
                                         Hoja 0x18

Marquez, Somodi, Vanotti                   |                      Organización Del Computador 2
-----------------------------------------------------------------------------------------------
monocromatizar asm en vinedo4000x3000.jpg 	 ciclos: 2710868012 	cpl: 67771696.000
monocromatizar c en vinedo4000x3000.jpg 	 ciclos: 24192985076 	cpl: 604824640.000
monocromatizar asm en vinedo557x2729.jpg 	 ciclos: 329544748 	cpl: 8238618.500
monocromatizar c en vinedo557x2729.jpg 	 ciclos: 3046060508 	cpl: 76151512.000
monocromatizar asm en vinedo883x977.jpg 	 ciclos: 181898572 	cpl: 4547464.500
monocromatizar c en vinedo883x977.jpg 	 ciclos: 1733967104 	cpl: 43349176.000
rotar asm en bosque1024x1024.jpg 	 ciclos: 151384592 	cpl: 3784614.750
rotar c en bosque1024x1024.jpg 	 ciclos: 1722297596 	cpl: 43057440.000
rotar asm en bosque1123x1203.jpg 	 ciclos: 183651308 	cpl: 4591283.000
rotar c en bosque1123x1203.jpg 	 ciclos: 2222160612 	cpl: 55554016.000
rotar asm en bosque1637x947.jpg 	 ciclos: 247510924 	cpl: 6187773.000
rotar c en bosque1637x947.jpg 	 ciclos: 2563697292 	cpl: 64092436.000
rotar asm en bosque256x256.jpg 	 ciclos: 3026184 	cpl: 75654.602
rotar c en bosque256x256.jpg 	 ciclos: 107232056 	cpl: 2680801.500
rotar asm en bosque4000x3000.jpg 	 ciclos: 2022082609 	cpl: 50552064.000
rotar c en bosque4000x3000.jpg 	 ciclos: 19848373202 	cpl: 496209312.000
rotar asm en bosque557x2729.jpg 	 ciclos: 212678552 	cpl: 5316964.000
rotar c en bosque557x2729.jpg 	 ciclos: 2500698012 	cpl: 62517452.000
rotar asm en bosque883x977.jpg 	 ciclos: 125722888 	cpl: 3143072.250
rotar c en bosque883x977.jpg 	 ciclos: 1420288952 	cpl: 35507224.000
rotar asm en lena1024x1024.jpg 	 ciclos: 152051860 	cpl: 3801296.500
rotar c en lena1024x1024.jpg 	 ciclos: 1724751136 	cpl: 43118776.000
rotar asm en lena1123x1203.jpg 	 ciclos: 216320208 	cpl: 5408005.000
rotar c en lena1123x1203.jpg 	 ciclos: 2214436508 	cpl: 55360916.000
rotar asm en lena1637x947.jpg 	 ciclos: 225545408 	cpl: 5638635.000
rotar c en lena1637x947.jpg 	 ciclos: 2546270712 	cpl: 63656768.000
rotar asm en lena256x256.jpg 	 ciclos: 5966127 	cpl: 149153.172
rotar c en lena256x256.jpg 	 ciclos: 106928624 	cpl: 2673215.500
rotar asm en lena557x2729.jpg 	 ciclos: 214661568 	cpl: 5366539.000
rotar c en lena557x2729.jpg 	 ciclos: 2503404684 	cpl: 62585120.000
rotar asm en lena883x977.jpg 	 ciclos: 122727400 	cpl: 3068185.000
rotar c en lena883x977.jpg 	 ciclos: 1420071236 	cpl: 35501784.000
rotar asm en vinedo1024x1024.jpg 	 ciclos: 153685624 	cpl: 3842140.750
rotar c en vinedo1024x1024.jpg 	 ciclos: 1725580412 	cpl: 43139512.000
rotar asm en vinedo1123x1203.jpg 	 ciclos: 218305760 	cpl: 5457644.000
rotar c en vinedo1123x1203.jpg 	 ciclos: 2213851724 	cpl: 55346292.000
rotar asm en vinedo1637x947.jpg 	 ciclos: 212622024 	cpl: 5315550.500
rotar c en vinedo1637x947.jpg 	 ciclos: 2550529584 	cpl: 63763240.000
rotar asm en vinedo256x256.jpg 	 ciclos: 2810780 	cpl: 70269.500
rotar c en vinedo256x256.jpg 	 ciclos: 107214000 	cpl: 2680350.000
rotar asm en vinedo4000x3000.jpg 	 ciclos: 1798077692 	cpl: 44951944.000
rotar c en vinedo4000x3000.jpg 	 ciclos: 19717827432 	cpl: 492945664.000
rotar asm en vinedo557x2729.jpg 	 ciclos: 249102520 	cpl: 6227563.000
rotar c en vinedo557x2729.jpg 	 ciclos: 2546979050 	cpl: 63674476.000
rotar asm en vinedo883x977.jpg 	 ciclos: 129036067 	cpl: 3225901.500
rotar c en vinedo883x977.jpg 	 ciclos: 1414547864 	cpl: 35363696.000
scale2x asm en bosque1024x1024.jpg 	 ciclos: 119977824 	cpl: 2999445.500
scale2x c en bosque1024x1024.jpg 	 ciclos: 5278841392 	cpl: 131971032.000
scale2x asm en bosque1123x1203.jpg 	 ciclos: 168899012 	cpl: 4222475.000
scale2x c en bosque1123x1203.jpg 	 ciclos: 6832378320 	cpl: 170809456.000
scale2x asm en bosque1637x947.jpg 	 ciclos: 185791168 	cpl: 4644779.000
scale2x c en bosque1637x947.jpg 	 ciclos: 7689595006 	cpl: 192239872.000
scale2x asm en bosque256x256.jpg 	 ciclos: 5809056 	cpl: 145226.406
scale2x c en bosque256x256.jpg 	 ciclos: 326073754 	cpl: 8151844.000
scale2x asm en bosque4000x3000.jpg 	 ciclos: 1393229628 	cpl: 34830740.000
scale2x c en bosque4000x3000.jpg 	 ciclos: 58514091204 	cpl: 1462852352.000
scale2x asm en bosque557x2729.jpg 	 ciclos: 196226596 	cpl: 4905665.000
scale2x c en bosque557x2729.jpg 	 ciclos: 7685520088 	cpl: 192138000.000
scale2x asm en bosque883x977.jpg 	 ciclos: 102595120 	cpl: 2564878.000
-----------------------------------------------------------------------------------------------
                                         Hoja 0x19

Marquez, Somodi, Vanotti                   |                      Organización Del Computador 2
-----------------------------------------------------------------------------------------------
scale2x c en bosque883x977.jpg 	 ciclos: 4349014408 	cpl: 108725360.000
scale2x asm en lena1024x1024.jpg 	 ciclos: 143656564 	cpl: 3591414.000
scale2x c en lena1024x1024.jpg 	 ciclos: 5252119656 	cpl: 131302992.000
scale2x asm en lena1123x1203.jpg 	 ciclos: 183336228 	cpl: 4583405.500
scale2x c en lena1123x1203.jpg 	 ciclos: 6778769040 	cpl: 169469216.000
scale2x asm en lena1637x947.jpg 	 ciclos: 189261320 	cpl: 4731533.000
scale2x c en lena1637x947.jpg 	 ciclos: 7880756180 	cpl: 197018912.000
scale2x asm en lena256x256.jpg 	 ciclos: 5714176 	cpl: 142854.406
scale2x c en lena256x256.jpg 	 ciclos: 322372556 	cpl: 8059313.500
scale2x asm en lena557x2729.jpg 	 ciclos: 196522872 	cpl: 4913072.000
scale2x c en lena557x2729.jpg 	 ciclos: 7899349880 	cpl: 197483744.000
scale2x asm en lena883x977.jpg 	 ciclos: 103721400 	cpl: 2593035.000
scale2x c en lena883x977.jpg 	 ciclos: 4314808660 	cpl: 107870224.000
scale2x asm en vinedo1024x1024.jpg 	 ciclos: 123140656 	cpl: 3078516.500
scale2x c en vinedo1024x1024.jpg 	 ciclos: 5312352680 	cpl: 132808816.000
scale2x asm en vinedo1123x1203.jpg 	 ciclos: 164055904 	cpl: 4101397.500
scale2x c en vinedo1123x1203.jpg 	 ciclos: 6808120304 	cpl: 170203008.000
scale2x asm en vinedo1637x947.jpg 	 ciclos: 176163116 	cpl: 4404078.000
scale2x c en vinedo1637x947.jpg 	 ciclos: 7872569864 	cpl: 196814240.000
scale2x asm en vinedo256x256.jpg 	 ciclos: 5919416 	cpl: 147985.406
scale2x c en vinedo256x256.jpg 	 ciclos: 329310652 	cpl: 8232766.500
scale2x asm en vinedo4000x3000.jpg 	 ciclos: 1450119264 	cpl: 36252984.000
scale2x c en vinedo4000x3000.jpg 	 ciclos: 58691983898 	cpl: 1467299584.000
scale2x asm en vinedo557x2729.jpg 	 ciclos: 203303696 	cpl: 5082592.500
scale2x c en vinedo557x2729.jpg 	 ciclos: 7483869268 	cpl: 187096736.000
scale2x asm en vinedo883x977.jpg 	 ciclos: 107739932 	cpl: 2693498.500
scale2x c en vinedo883x977.jpg 	 ciclos: 4439830262 	cpl: 110995752.000
sepia asm en bosque1024x1024.jpg 	 ciclos: 312765200 	cpl: 7819129.500
sepia c en bosque1024x1024.jpg 	 ciclos: 2850244716 	cpl: 71256112.000
sepia asm en bosque1123x1203.jpg 	 ciclos: 387886808 	cpl: 9697170.000
sepia c en bosque1123x1203.jpg 	 ciclos: 3662567620 	cpl: 91564192.000
sepia asm en bosque1637x947.jpg 	 ciclos: 465878884 	cpl: 11646972.000
sepia c en bosque1637x947.jpg 	 ciclos: 4227763116 	cpl: 105694080.000
sepia asm en bosque256x256.jpg 	 ciclos: 17872696 	cpl: 446817.406
sepia c en bosque256x256.jpg 	 ciclos: 189567084 	cpl: 4739177.000
sepia asm en bosque4000x3000.jpg 	 ciclos: 3419736948 	cpl: 85493424.000
sepia c en bosque4000x3000.jpg 	 ciclos: 31498947880 	cpl: 787473728.000
sepia asm en bosque557x2729.jpg 	 ciclos: 445095944 	cpl: 11127398.000
sepia c en bosque557x2729.jpg 	 ciclos: 4044268360 	cpl: 101106704.000
sepia asm en bosque883x977.jpg 	 ciclos: 248968420 	cpl: 6224210.500
sepia c en bosque883x977.jpg 	 ciclos: 2332241460 	cpl: 58306036.000
sepia asm en lena1024x1024.jpg 	 ciclos: 307983036 	cpl: 7699576.000
sepia c en lena1024x1024.jpg 	 ciclos: 2708022848 	cpl: 67700568.000
sepia asm en lena1123x1203.jpg 	 ciclos: 385689728 	cpl: 9642243.000
sepia c en lena1123x1203.jpg 	 ciclos: 3487987564 	cpl: 87199688.000
sepia asm en lena1637x947.jpg 	 ciclos: 444025176 	cpl: 11100630.000
sepia c en lena1637x947.jpg 	 ciclos: 3964097960 	cpl: 99102448.000
sepia asm en lena256x256.jpg 	 ciclos: 17486592 	cpl: 437164.812
sepia c en lena256x256.jpg 	 ciclos: 172838676 	cpl: 4320967.000
sepia asm en lena557x2729.jpg 	 ciclos: 448142168 	cpl: 11203554.000
sepia c en lena557x2729.jpg 	 ciclos: 3908614500 	cpl: 97715360.000
sepia asm en lena883x977.jpg 	 ciclos: 254115288 	cpl: 6352882.500
sepia c en lena883x977.jpg 	 ciclos: 2267233728 	cpl: 56680844.000
sepia asm en vinedo1024x1024.jpg 	 ciclos: 319000020 	cpl: 7975001.000
sepia c en vinedo1024x1024.jpg 	 ciclos: 2697478416 	cpl: 67436960.000
sepia asm en vinedo1123x1203.jpg 	 ciclos: 386476556 	cpl: 9661914.000
sepia c en vinedo1123x1203.jpg 	 ciclos: 3465939176 	cpl: 86648480.000
sepia asm en vinedo1637x947.jpg 	 ciclos: 452060945 	cpl: 11301524.000
-----------------------------------------------------------------------------------------------
                                         Hoja 0x1A
Marquez, Somodi, Vanotti                   |                      Organización Del Computador 2
-----------------------------------------------------------------------------------------------
sepia c en vinedo1637x947.jpg 	 ciclos: 4007672840 	cpl: 100191824.000
sepia asm en vinedo256x256.jpg 	 ciclos: 17393280 	cpl: 434832.000
sepia c en vinedo256x256.jpg 	 ciclos: 168736832 	cpl: 4218421.000
sepia asm en vinedo4000x3000.jpg 	 ciclos: 3468001052 	cpl: 86700024.000
sepia c en vinedo4000x3000.jpg 	 ciclos: 30864038664 	cpl: 771600960.000
sepia asm en vinedo557x2729.jpg 	 ciclos: 450718008 	cpl: 11267950.000
sepia c en vinedo557x2729.jpg 	 ciclos: 3842586704 	cpl: 96064664.000
sepia asm en vinedo883x977.jpg 	 ciclos: 252636832 	cpl: 6315921.000
sepia c en vinedo883x977.jpg 	 ciclos: 2213798104 	cpl: 55344952.000
smalltiles asm en bosque1024x1024.jpg      ciclos: 118208208  cpl: 2955205.250
smalltiles c en bosque1024x1024.jpg    ciclos: 2164729612     cpl: 54118240.000
smalltiles asm en bosque1123x1203.jpg      ciclos: 177999468  cpl: 4449987.000
smalltiles c en bosque1123x1203.jpg    ciclos: 2778472520     cpl: 69461808.000
smalltiles asm en bosque1637x947.jpg   ciclos: 227938344  cpl: 5698458.500
smalltiles c en bosque1637x947.jpg     ciclos: 3199320796     cpl: 79983024.000
smalltiles asm en bosque256x256.jpg    ciclos: 3640192    cpl: 91004.797
smalltiles c en bosque256x256.jpg      ciclos: 142885500  cpl: 3572137.500
smalltiles asm en bosque4000x3000.jpg      ciclos: 1509475024     cpl: 37736876.000
smalltiles c en bosque4000x3000.jpg    ciclos: 24684886720    cpl: 617122176.000
smalltiles asm en bosque557x2729.jpg   ciclos: 215772128  cpl: 5394303.000
smalltiles c en bosque557x2729.jpg     ciclos: 3144819544     cpl: 78620488.000
smalltiles asm en bosque883x977.jpg    ciclos: 115123728  cpl: 2878093.250
smalltiles c en bosque883x977.jpg      ciclos: 1774649668     cpl: 44366244.000
smalltiles asm en lena1024x1024.jpg    ciclos: 127812784  cpl: 3195319.500
smalltiles c en lena1024x1024.jpg      ciclos: 2171503312     cpl: 54287584.000
smalltiles asm en lena1123x1203.jpg    ciclos: 187366300  cpl: 4684157.500
smalltiles c en lena1123x1203.jpg      ciclos: 2775029648     cpl: 69375744.000
smalltiles asm en lena1637x947.jpg     ciclos: 205587528  cpl: 5139688.000
smalltiles c en lena1637x947.jpg   ciclos: 3192219508     cpl: 79805488.000
smalltiles asm en lena256x256.jpg      ciclos: 3612160    cpl: 90304.000
smalltiles c en lena256x256.jpg    ciclos: 134328764  cpl: 3358219.250
smalltiles asm en lena557x2729.jpg     ciclos: 229089704  cpl: 5727242.500
smalltiles c en lena557x2729.jpg   ciclos: 3139221852     cpl: 78480544.000
smalltiles asm en lena883x977.jpg      ciclos: 115031064  cpl: 2875776.500
smalltiles c en lena883x977.jpg    ciclos: 1781892520     cpl: 44547312.000
smalltiles asm en vinedo1024x1024.jpg      ciclos: 128547848  cpl: 3213696.250
smalltiles c en vinedo1024x1024.jpg    ciclos: 2158978088     cpl: 53974452.000
smalltiles asm en vinedo1123x1203.jpg      ciclos: 182421900  cpl: 4560547.500
smalltiles c en vinedo1123x1203.jpg    ciclos: 2770360816     cpl: 69259024.000
smalltiles asm en vinedo1637x947.jpg   ciclos: 194639528  cpl: 4865988.000
smalltiles c en vinedo1637x947.jpg     ciclos: 3191624268     cpl: 79790608.000
smalltiles asm en vinedo256x256.jpg    ciclos: 3515484    cpl: 87887.102
smalltiles c en vinedo256x256.jpg      ciclos: 134420464  cpl: 3360511.500
smalltiles asm en vinedo4000x3000.jpg      ciclos: 1506536908     cpl: 37663424.000
smalltiles c en vinedo4000x3000.jpg    ciclos: 24735930752    cpl: 618398272.000
smalltiles asm en vinedo557x2729.jpg   ciclos: 224691256  cpl: 5617281.500
smalltiles c en vinedo557x2729.jpg     ciclos: 3154571408     cpl: 78864288.000
smalltiles asm en vinedo883x977.jpg    ciclos: 113363056  cpl: 2834076.500











-----------------------------------------------------------------------------------------------
                                         Hoja 0x1B










