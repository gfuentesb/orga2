Se comparó la eficiencia de las implementaciones en C y en ASM com SSE. El resultado general 
es que las implementaciones en ASM son más eficienes que las de C.

Para realizar esta comparación se corrieron todos los filtros con todas las imágenes con cada 
implementación 40 veces cada combinación.

Veremos de forma puntual los resultados con una imagen en particular, pero adjuntaremos, 
aunque de forma desagradable, los resultados con todas las corridas.

Tomaremos como ejemplo la imagen de lena de 1024

Los resultados fueron:

blit           asm    ciclos: 162258576    ciclos por llamada: 4056464.500
blit           c      ciclos: 365623200    ciclos por llamada: 9140580.000
blur           asm    ciclos: 1119204100   ciclos por llamada: 27980102.000
blur           c      ciclos: 11412049068  ciclos por llamada: 285301216.000
edge           asm    ciclos: 164348024    ciclos por llamada: 4108700.750
edge           c      ciclos: 3306667652   ciclos por llamada: 82666696.000
monocromatizar asm    ciclos: 221693312    ciclos por llamada: 5542333.000
monocromatizar c      ciclos: 2102472740   ciclos por llamada: 52561816.000
rotar          asm    ciclos: 152051860    ciclos por llamada: 3801296.500
rotar          c      ciclos: 1724751136   ciclos por llamada: 43118776.000
scale2x        asm    ciclos: 143656564    ciclos por llamada: 3591414.000
scale2x        c      ciclos: 5252119656   ciclos por llamada: 131302992.000
sepia          asm    ciclos: 307983036    ciclos por llamada: 7699576.000
sepia          c      ciclos: 2708022848   ciclos por llamada: 67700568.000
smalltiles     asm    ciclos: 127812784    ciclos por llamada: 3195319.500
smalltiles     c      ciclos: 2171503312   ciclos por llamada: 54287584.000

Como se puede observar en este caso en particular, las implementaciones en asm para esta 
imagen fueron significativamente más eficientes. Salvo blit que por tener poca lógica y 
tener que competir contra memcpy muchas posibilidades de arrasar no tenía, todos los otros 
filtros han sido por lo menos casi 10 veces más rápidos. Destacando el casi de scale2x que 
fue 36 veces más rápido en asm que en C.

Pero lo importante no es observar que nuestras implementaciones han tenido la destacada 
peculiaridad de ser más eficientes cuando las hicimos en ASM que cuando las hicimos en C. 
La moraleja que hay que destacar está más relacionada con los motivos que no sólo hicieron 
que esto sucediera de esta manera, sino que hasta sugerían previamente que un resultado 
semejante a este se puede realizar.
El quid de la cuestión se haya en el uso de las funciones SSE. Este set de instrucciones 
le permitieron a las funciones en ASM operar con mucho mayor volumen de datos en la misma 
cantidad de operaciones. Las operaciones SSE no sólo permitieron calcular varios píxeles en 
cada iteración de los ciclos que conformaban los filtros, sino que incluso permitían operar 
sobre varios canales a la vez. Mientras que desde el código de C se tuvo que trabajar píxel 
a píxel y, en muchas ocasiones, canal a canal.
